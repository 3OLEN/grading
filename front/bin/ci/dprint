#!/bin/bash

set -eu

readonly PROJECT_PATH="$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../..")"

# Utils
source "${PROJECT_PATH}/bin/_common.bash"

# -------------------------------------------------------------------------------------------------------------------- #
# Checking if image exists
check_ci_image

# Script parameters
container_force_stop=false
docker_input_is_tty="--interactive --tty"

dprint_action="check"
dprint_option_no_cache=
dprint_option_debug=
dprint_files=
# loop over parameters
for param in "${@}"; do
    if [[ "${param}" == "--force-stop" ]]; then
        container_force_stop=true
    elif [[ "${param}" == "--not-a-tty" ]]; then
        docker_input_is_tty=
    elif [[ "${param}" == "--no-cache" ]]; then
        dprint_option_no_cache="--incremental false"
    elif [[ "${param}" == "--fix" ]]; then
        dprint_action="fmt"
    elif [[ "${param}" == "--debug" ]]; then
        dprint_option_debug="--log-level debug"
    elif ! [[ "${param:0:2}" == "--" ]]; then
        dprint_files="${dprint_files} ${param}"
    fi
done

dprint_args="$(trim "${dprint_option_no_cache} $(trim "${dprint_action} $(trim "${dprint_option_debug} ${dprint_files}")")")"

# Checking if container is running
readonly CI_DPRINT_CONTAINER_NAME="ci--olen-grading-front-dprint"
stop_running_container "${CI_DPRINT_CONTAINER_NAME}" force_stop

# Running container
title "Running CI tool \`dprint ${dprint_args}\`..."
docker run \
    $docker_input_is_tty \
    --rm \
    --volume "${PROJECT_PATH}/config:/usr/project/config" \
    --volume "${PROJECT_PATH}/src:/usr/project/src" \
    --volume "${PROJECT_PATH}/var/ci/cache/dprint:/usr/project/var/ci/cache/dprint" \
    --name "${CI_DPRINT_CONTAINER_NAME}" \
    "${FRONT_CI_DOCKER_IMAGE}" \
    npx dprint --config config/ci/.dprint.json $dprint_args
